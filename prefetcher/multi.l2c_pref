#include <string>
#include <assert.h>
#include "cache.h"
#include "prefetcher.h"

/* Supported prefetchers at L2 */
#include "sms.h"
#include "scooby.h"
#include "next_line.h"
#include "bop.h"
#include "sandbox.h"
#include "dspatch.h"
#include "spp_dev2.h"
#include "ppf_dev.h"
#include "mlop.h"
#include "bingo.h"
#include "stride.h"
#include "ipcp_L2.h"
#include "ampm.h"
#include "streamer.h"
#include "pref_power7.h"
#include "rsa.h"
#include "pmp.h"
#include "rb.h"
#include "isb.h"
#include "Domino.h"
#include "sisb.h"
#include "sdomino.h"

using namespace std;

namespace knob
{
	extern vector<string> l2c_prefetcher_types;
}
unordered_map<uint64_t, vector<uint64_t>> file_prefetcher;

// #define PC_RECORD
// #define PC_FILTE
#define FILE_PREFETCHER_DEGREE 2
#define BAD_PC_THRESH 0.1

#ifdef PC_FILTE
vector<set<uint64_t>> bad_pc;
#endif

// #define PREFETCH_OUTPUT
// #define LOAD_OUTPUT

#ifdef PREFETCH_OUTPUT
ofstream prefetch_output_file;
#endif

#ifdef LOAD_OUTPUT
ofstream load_output_file;
#endif

#ifdef PC_RECORD
struct stat_data
{
	int accurate_num;
	int all_num;
	double accurate;
	stat_data(int a = 0, int b = 1, double c = 0) : accurate_num(a), all_num(b), accurate(c){};
};
struct PC_Record
{
	// 只从预测角度出发，并未考虑是否实际用到
	// use block addr
	unordered_map<uint64_t, vector<uint64_t>> prefetched_address; // addr to pc, have prefetched
	unordered_map<uint64_t, stat_data> stat;					  // pc to stat_data
	void prefetch(uint64_t pc, uint64_t addr)
	{
		if (prefetched_address.find(addr) != prefetched_address.end())
		{
			prefetched_address[addr].emplace_back(pc);
		}
		else
		{
			prefetched_address[addr] = vector<uint64_t>(1, pc);
		}
		if (stat.find(pc) != stat.end())
		{
			stat[pc].all_num++;
		}
		else
		{
			stat[pc] = stat_data(0, 1, 0);
		}
	}
	void access(uint64_t addr)
	{
		if (prefetched_address.find(addr) != prefetched_address.end())
		{
			for (auto &pc : prefetched_address[addr])
			{
				stat[pc].accurate_num++;
			}
			prefetched_address.erase(addr);
		}
	}
	void evict(uint64_t addr)
	{
		if (prefetched_address.find(addr) != prefetched_address.end())
		{
			prefetched_address.erase(addr);
		}
	}
	static bool compare(const stat_data &a, const stat_data &b)
	{
		return a.accurate > b.accurate;
	}
	void get_result(ofstream &ofs)
	{
		for (auto &i : stat)
		{
			i.second.accurate = 1.0 * i.second.accurate_num / i.second.all_num;
		}
		vector<pair<uint64_t, stat_data>> result(stat.begin(), stat.end());
		sort(result.begin(), result.end(), [](const pair<uint64_t, stat_data> &a, pair<uint64_t, stat_data> &b)
			 { return a.second.accurate > b.second.accurate; });
		for (auto &i : result)
		{
			if (i.second.accurate < BAD_PC_THRESH)
				// cout << "pc=0x" << hex << i.first << ", acc=" << i.second.accurate << ", use=" << i.second.accurate_num << ", all=" << i.second.all_num << endl;
				// cerr << i.first << endl;
				ofs << i.first << endl;
		}
	}
};
vector<PC_Record> pc_record;
#endif

// vector<Prefetcher*> prefetchers;

void CACHE::l2c_prefetcher_initialize()
{
	for (uint32_t index = 0; index < knob::l2c_prefetcher_types.size(); ++index)
	{
#ifdef PC_FILTE
		bad_pc.emplace_back(set<uint64_t>());
		string file_name = "bad_pc_" + knob::l2c_prefetcher_types[index] + ".txt";
		ifstream input_pc_file(file_name);
		if (input_pc_file.is_open())
		{
			uint64_t pc;
			while (input_pc_file >> pc)
			{
				bad_pc[index].insert(pc);
			}
			input_pc_file.close();
			cout << "Filte bad PC! Successfully get PCs!" << endl;
		}
#endif

#ifdef PC_RECORD
		pc_record.emplace_back(PC_Record());
#endif

#ifdef PREFETCH_OUTPUT
		prefetch_output_file.open(knob::l2c_prefetcher_types[index] + "_prefetch_output.txt");
		if (!prefetch_output_file.is_open())
		{
			exit(2);
		}
#endif

#ifdef LOAD_OUTPUT
		load_output_file.open("load_output.txt");
		if (!load_output_file.is_open())
		{
			exit(2);
		}
#endif

		if (!knob::l2c_prefetcher_types[index].compare("none"))
		{
			cout << "adding L2C_PREFETCHER: NONE" << endl;
		}
		else if (!knob::l2c_prefetcher_types[index].compare("sms"))
		{
			cout << "adding L2C_PREFETCHER: SMS" << endl;
			SMSPrefetcher *pref_sms = new SMSPrefetcher(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_sms);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("bop"))
		{
			cout << "adding L2C_PREFETCHER: BOP" << endl;
			BOPrefetcher *pref_bop = new BOPrefetcher(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_bop);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("dspatch"))
		{
			cout << "adding L2C_PREFETCHER: DSPatch" << endl;
			DSPatch *pref_dspatch = new DSPatch(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_dspatch);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("scooby"))
		{
			cout << "adding L2C_PREFETCHER: Scooby" << endl;
			Scooby *pref_scooby = new Scooby(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_scooby);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("next_line"))
		{
			cout << "adding L2C_PREFETCHER: next_line" << endl;
			NextLinePrefetcher *pref_nl = new NextLinePrefetcher(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_nl);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("sandbox"))
		{
			cout << "adding L2C_PREFETCHER: Sandbox" << endl;
			SandboxPrefetcher *pref_sandbox = new SandboxPrefetcher(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_sandbox);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("spp_dev2"))
		{
			cout << "adding L2C_PREFETCHER: SPP_dev2" << endl;
			SPP_dev2 *pref_spp_dev2 = new SPP_dev2(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_spp_dev2);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("spp_ppf_dev"))
		{
			cout << "adding L2C_PREFETCHER: SPP_PPF_dev" << endl;
			SPP_PPF_dev *pref_spp_ppf_dev = new SPP_PPF_dev(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_spp_ppf_dev);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("mlop"))
		{
			cout << "adding L2C_PREFETCHER: MLOP" << endl;
			MLOP *pref_mlop = new MLOP(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_mlop);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("bingo"))
		{
			cout << "adding L2C_PREFETCHER: Bingo" << endl;
			Bingo *pref_bingo = new Bingo(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_bingo);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("RSA"))
		{
			cout << "adding L2C_PREFETCHER: RSA" << endl;
			RSA *pref_RSA = new RSA(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_RSA);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("pmp"))
		{
			cout << "adding L2C_PREFETCHER: pmp" << endl;
			PMP *pref_pmp = new PMP(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_pmp);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("rb"))
		{
			cout << "adding L2C_PREFETCHER: rb" << endl;
			RB *pref_rb = new RB(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_rb);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("ISB"))
		{
			cout << "adding L2C_PREFETCHER: ISB" << endl;
			ISB *pref_isb = new ISB(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_isb);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("Domino"))
		{
			cout << "adding L2C_PREFETCHER: Domino" << endl;
			Domino *pref_domino = new Domino(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_domino);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("sisb"))
		{
			cout << "adding L2C_PREFETCHER: sisb" << endl;
			sisb *pref_sisb = new sisb(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_sisb);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("sdomino"))
		{
			cout << "adding L2C_PREFETCHER: sdomino" << endl;
			sdomino *pref_sdomino = new sdomino(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_sdomino);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("stride"))
		{
			cout << "adding L2C_PREFETCHER: Stride" << endl;
			StridePrefetcher *pref_stride = new StridePrefetcher(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_stride);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("streamer"))
		{
			cout << "adding L2C_PREFETCHER: streamer" << endl;
			Streamer *pref_streamer = new Streamer(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_streamer);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("power7"))
		{
			cout << "adding L2C_PREFETCHER: POWER7" << endl;
			POWER7_Pref *pref_power7 = new POWER7_Pref(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_power7);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("ipcp"))
		{
			cout << "adding L2C_PREFETCHER: IPCP" << endl;
			IPCP_L2 *pref_ipcp_L2 = new IPCP_L2(knob::l2c_prefetcher_types[index], this);
			prefetchers.push_back(pref_ipcp_L2);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("ampm"))
		{
			cout << "adding L2C_PREFETCHER: AMPM" << endl;
			AMPM *pref_ampm = new AMPM(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_ampm);
		}
		else if (!knob::l2c_prefetcher_types[index].compare("file"))
		{
			cout << "adding L2C_PREFETCHER: file" << endl;
			uint64_t line_no = 0;
			uint64_t instr_id, addr;
			ifstream file_in("mlp_prefetch.txt");
			while (file_in >> dec >> instr_id >> hex >> addr)
			{
				auto itr = file_prefetcher.find(instr_id);
				if (itr == file_prefetcher.end())
				{
					file_prefetcher[instr_id] = vector<uint64_t>();
					file_prefetcher[instr_id].push_back(addr);
				}
				else
				{
					if (file_prefetcher[instr_id].size() < FILE_PREFETCHER_DEGREE)
					{
						file_prefetcher[instr_id].push_back(addr);
					}
					else
					{
						cerr << "Exceeded max prefetch degree of " << FILE_PREFETCHER_DEGREE << " on line " << line_no << " for instr_id " << instr_id << endl;
					}
				}
				line_no++;
			}
		}
		else
		{
			cout << "unsupported prefetcher type " << knob::l2c_prefetcher_types[index] << endl;
			exit(1);
		}
	}

	assert(knob::l2c_prefetcher_types.size() == prefetchers.size() || !knob::l2c_prefetcher_types[0].compare("none"));
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in, uint64_t instr_id, uint64_t curr_cycle)
{
#ifdef LOAD_OUTPUT
	load_output_file << instr_id << ", " << curr_cycle << ", " << hex << addr << ", " << ip << dec << ", " << (int)cache_hit << endl;
#endif

	vector<uint64_t> pref_addr;
	for (uint32_t index = 0; index < prefetchers.size(); ++index)
	{
#ifdef PC_RECORD
		pc_record[index].access(addr >> LOG2_BLOCK_SIZE);
#endif

#ifdef PC_FILTE
		if (bad_pc[index].find(ip) != bad_pc[index].end())
			continue;
#endif
		if (!knob::l2c_prefetcher_types[index].compare("file"))
		{
			auto itr = file_prefetcher.find(instr_id);
			if (itr != file_prefetcher.end())
			{
				for (auto prefetch_addr : itr->second)
				{
					// cout << "Prefetch " << hex << prefetch_addr << dec << " for instr_id " << instr_id << endl;
					prefetch_line(ip, addr, prefetch_addr, FILL_L2, 0);
				}
			}
			continue;
		}

		if (knob::l2c_prefetcher_types[index].compare("ipcp"))
		{
			prefetchers[index]->invoke_prefetcher(ip, addr, cache_hit, type, pref_addr);
		}
		else /* means IPCP */
		{
			IPCP_L2 *pref_ipcp_L2 = (IPCP_L2 *)prefetchers[index];
			pref_ipcp_L2->invoke_prefetcher(ip, addr, cache_hit, type, metadata_in, pref_addr);
		}

		if (knob::l2c_prefetcher_types[index].compare("spp_dev2") &&
			knob::l2c_prefetcher_types[index].compare("spp_ppf_dev") &&
			knob::l2c_prefetcher_types[index].compare("mlop") &&
			knob::l2c_prefetcher_types[index].compare("bingo") &&
			knob::l2c_prefetcher_types[index].compare("RSA") &&
			knob::l2c_prefetcher_types[index].compare("pmp") &&
			knob::l2c_prefetcher_types[index].compare("rb") &&
			knob::l2c_prefetcher_types[index].compare("ipcp") &&
			!pref_addr.empty())
		{
			// Domino isb sdomino sisb
			for (uint32_t addr_index = 0; addr_index < pref_addr.size(); ++addr_index)
			{
				prefetch_line(ip, addr, pref_addr[addr_index], FILL_L2, 0);
			}
		}
#ifdef PC_RECORD
		for (auto &addr : pref_addr)
		{
			pc_record[index].prefetch(ip, addr >> LOG2_BLOCK_SIZE);
		}
#endif

#ifdef PREFETCH_OUTPUT
		for (size_t i = 0; i < pref_addr.size(); i++)
		{
			prefetch_output_file << dec << instr_id << " " << hex << pref_addr[i] << endl;
		}
#endif

		pref_addr.clear();
	}

	return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
#ifdef PC_RECORD
	for (uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		pc_record[index].evict(evicted_addr >> LOG2_BLOCK_SIZE);
	}
#endif

	if (prefetch)
	{
		for (uint32_t index = 0; index < prefetchers.size(); ++index)
		{
			if (!prefetchers[index]->get_type().compare("scooby"))
			{
				Scooby *pref_scooby = (Scooby *)prefetchers[index];
				pref_scooby->register_fill(addr);
			}
			if (!prefetchers[index]->get_type().compare("next_line"))
			{
				NextLinePrefetcher *pref_nl = (NextLinePrefetcher *)prefetchers[index];
				pref_nl->register_fill(addr);
			}
			if (!prefetchers[index]->get_type().compare("bop"))
			{
				BOPrefetcher *pref_bop = (BOPrefetcher *)prefetchers[index];
				pref_bop->register_fill(addr);
			}
			if (!prefetchers[index]->get_type().compare("spp_dev2"))
			{
				SPP_dev2 *pref_spp_dev2 = (SPP_dev2 *)prefetchers[index];
				pref_spp_dev2->cache_fill(addr, set, way, prefetch, evicted_addr);
			}
			// if(!prefetchers[index]->get_type().compare("spp_ppf_dev"))
			//{
			//	SPP_PPF_dev *pref_spp_ppf_dev = (SPP_PPF_dev*)prefetchers[index];
			//	pref_spp_ppf_dev->cache_fill(addr, set, way, prefetch, evicted_addr);
			// }
			if (!prefetchers[index]->get_type().compare("mlop"))
			{
				MLOP *pref_mlop = (MLOP *)prefetchers[index];
				pref_mlop->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if (!prefetchers[index]->get_type().compare("bingo"))
			{
				Bingo *pref_bingo = (Bingo *)prefetchers[index];
				pref_bingo->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if (!prefetchers[index]->get_type().compare("RSA"))
			{
				RSA *pref_RSA = (RSA *)prefetchers[index];
				pref_RSA->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if (!prefetchers[index]->get_type().compare("pmp"))
			{
				PMP *pref_pmp = (PMP *)prefetchers[index];
				pref_pmp->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if (!prefetchers[index]->get_type().compare("rb"))
			{
				RB *pref_rb = (RB *)prefetchers[index];
				pref_rb->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if (!prefetchers[index]->get_type().compare("ISB"))
			{
				ISB *pref_isb = (ISB *)prefetchers[index];
				pref_isb->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if (!prefetchers[index]->get_type().compare("Domino"))
			{
				Domino *pref_domino = (Domino *)prefetchers[index];
				pref_domino->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if (!prefetchers[index]->get_type().compare("sisb"))
			{
				sisb *pref_sisb = (sisb *)prefetchers[index];
				pref_sisb->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if (!prefetchers[index]->get_type().compare("sdomino"))
			{
				sdomino *pref_sdomino = (sdomino *)prefetchers[index];
				pref_sdomino->register_fill(addr, set, way, prefetch, evicted_addr);
			}
		}
	}

	return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_prefetch_hit(uint64_t addr, uint64_t ip, uint32_t metadata_in)
{
	for (uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		if (!prefetchers[index]->get_type().compare("scooby"))
		{
			Scooby *pref_scooby = (Scooby *)prefetchers[index];
			pref_scooby->register_prefetch_hit(addr);
		}
	}

	return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
	for (uint32_t index = 0; index < prefetchers.size(); ++index)
	{
#ifdef PC_RECORD
		string file_name = "bad_pc_" + knob::l2c_prefetcher_types[index] + ".txt";
		ofstream output_pc_file(file_name);
		if (output_pc_file.is_open())
		{
			pc_record[index].get_result(output_pc_file);
		}
		output_pc_file.close();
#endif
		prefetchers[index]->dump_stats();
	}
}

void CACHE::l2c_prefetcher_print_config()
{
	for (uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		prefetchers[index]->print_config();
	}
}

void CACHE::l2c_prefetcher_broadcast_bw(uint8_t bw_level)
{
	for (uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		if (!prefetchers[index]->get_type().compare("scooby"))
		{
			Scooby *pref_scooby = (Scooby *)prefetchers[index];
			pref_scooby->update_bw(bw_level);
		}
		if (!prefetchers[index]->get_type().compare("dspatch"))
		{
			DSPatch *pref_dspatch = (DSPatch *)prefetchers[index];
			pref_dspatch->update_bw(bw_level);
		}
	}
}

void CACHE::l2c_prefetcher_broadcast_ipc(uint8_t ipc)
{
	for (uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		if (!prefetchers[index]->get_type().compare("scooby"))
		{
			Scooby *pref_scooby = (Scooby *)prefetchers[index];
			pref_scooby->update_ipc(ipc);
		}
	}
}

void CACHE::l2c_prefetcher_broadcast_acc(uint32_t acc_level)
{
	for (uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		if (!prefetchers[index]->get_type().compare("scooby"))
		{
			Scooby *pref_scooby = (Scooby *)prefetchers[index];
			pref_scooby->update_acc(acc_level);
		}
	}
}
